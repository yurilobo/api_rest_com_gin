1 cria o arquivo go mode
go mod init api_com_gin

2-baixa o gin
go get -u github.com/gin-gonic/gin

3-cria o arquivo main

4-inicia o servidor com o gin

5- com o trecho de codigo abaixo consigo facilmento selecionar as portas que vou ultilizar para abrir o servidor
a principio comeco com a porta 8080 podendo fazer outras declaraoes de portas

r := gin.Default()
	r.Run("5000")ex 5000

6-funcao para criar os alunos, chamar essa fuçâo na main

7- modularizando o codigo
-uso de models
-
Modularizamos nosso código criando pacotes de controles e rotas, tornando nosso código mais fácil de manter e editar;

Aprendemos como pegar informações passadas por parâmetros e retornar uma mensagem personalizada;

Criamos a struct de aluno, que vamos disponibilizar como recurso da nossa API.

8- quando rodei o arquivo do docker compose tive problemas para subir o servidor, poiis a porta 5432 já estava sendo usada
porem nao era uso local, talvez algum outro docker compose que usei
mudei a porta para 5433 e devo aprender a matar a instancia de do postgres 
-nao funciou

10-uso do docker-compose exec postgres sh
 e do 
hostname -i

11- para subir o postgress direitinho tive que usar
service docker restart
e depois subi o docker de novo
se reiniciar o pc tem que derrubar a instancia local e a "remota"
service docker restart
sudo systemctl stop postgresql


12-
Instalamos o Gorm para não escrever código sql, facilitando a comunicação da aplicação com o banco de dados;

Conectamos a API com banco de dados e realizamos uma migração com base na struct de aluno;

Alteramos o controle para exibir os alunos registrados no banco de dados!

13-novo curso validação  testes e paginas em html

uso do "gopkg.in/validator.v2"
go get gopkg.in/validator.v2

14-o que fiz
Carregamos o projeto base e criamos a imagem do banco de dados no Docker;
Criamos nossas validações na struct de Aluno, garantindo que um campo não fique em branco e tenha uma quantidade específica de caracteres;
Aplicamos essa validação no controller no momento que criamos ou editamos um aluno.

15-testes com go
-go testes
